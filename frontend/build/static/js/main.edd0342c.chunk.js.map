{"version":3,"sources":["clearwater_logo.png","components/signup.js","components/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Signup","props","react_default","a","createElement","className","src","require","id","alt","onSubmit","handleSubmit","htmlFor","type","autoFocus","placeholder","onChange","handleChange","react_input_mask_default","mask","Button","block","bsSize","link","App","signup","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","render","BrowserRouter","src_components_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.edd0342c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clearwater_logo.4262ef06.png\";","import React from \"react\";\nimport \"./App.css\";\nimport InputMask from \"react-input-mask\";\nimport { Button } from \"react-bootstrap\";\nimport \"reactstrap\";\n\nconst Signup = props => {\n  // handleSubmit = event => {\n  //   axios\n  //     .post(`http://localhost:9000/users`, {\n  //       firstName: this.state.firstName,\n  //       lastName: this.state.lastName,\n  //       username: this.state.email,\n  //       phoneNumber: this.state.phoneNumber\n  //     })\n  //     .then(res => {\n  //       console.log(res);\n  //     })\n  //     .catch(err => {\n  //       console.log(err);\n  //     });\n  // };\n\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <img\n          src={require(\"../clearwater_logo.png\")}\n          className=\"img-responsive\"\n          id=\"StudentSenateLogo\"\n          alt=\"StudentSenateLogo\"\n        />\n      </div>\n      <div className=\"container\">\n        <h3> Parking Notifier Sign-up </h3>\n        <p>\n          {\" \"}\n          During a snow emergency, the City of Eau Claire will activate\n          alternate side parking rules. Complete the form below to sign up for\n          text alerts when alternate side parking is in effect.{\" \"}\n        </p>\n\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\" id=\"nameLabel\">\n            {\" \"}\n            Name{\" \"}\n          </label>\n          <div className=\"form-group\" id=\"firstAndLastName\">\n            <input\n              type=\"name\"\n              className=\"form-control\"\n              autoFocus\n              id=\"firstName\"\n              placeholder=\"First\"\n              onChange={this.handleChange}\n            />\n            <input\n              type=\"name\"\n              className=\"form-control\"\n              id=\"lastName\"\n              placeholder=\"Last\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"phoneNumber\"> Phone Number </label>\n            <InputMask\n              mask=\"999-999-9999\"\n              type=\"tel\"\n              className=\"form-control\"\n              id=\"phoneNumber\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\"> Email </label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"email\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <Button\n            block\n            type=\"submit\"\n            className=\"btn-primary\"\n            bsSize=\"large\"\n            //            disabled={!this.validateForm()}\n          >\n            {\" \"}\n            Submit{\" \"}\n          </Button>\n          <Button\n            link=\"/unsubscribe\"\n            id=\"unsubscribeBtn\"\n            block\n            type=\"unsubscribe\"\n            className=\"btn-primary\"\n            bsSize=\"small\"\n            //            disabled={!this.validateForm()}\n          >\n            {\" \"}\n            Unsubscribe{\" \"}\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n};\nexport default Signup;\n","import React from \"react\";\nimport Signup from \"./signup\";\n//import Unsubscribe from './unsubscribe'\n\nconst App = () => (\n  <div>\n    <Signup />\n  </div>\n);\n//\n// render() {\n//   return (\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>\n//   )\n// }\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nrender(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}